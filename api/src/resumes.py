from registrations import send_apply_confirm
from db import db

from flask import Blueprint, request, Response, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from bson import ObjectId

import boto3
from werkzeug.utils import secure_filename

import pytz
import datetime


resume_api = Blueprint('resumes', __name__)

ALLOWED_EXTENSIONS = {'pdf', 'doc', 'docx'}
BUCKET = 'hophacks-resume'

# remove weird directories just in case
def check_filename(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@resume_api.route('/', methods = ['POST'])
@jwt_required
def upload():
    """Upload a resume to the current users profile. Behind the scene stores a file in AWS s3.

    :reqheader Authorization: ``Bearer <JWT Token>``

    :form file: Resume file, should be .pdf or .docx

    :status 200: File uploaded successfully
    :status 400: No file was uploaded, or wrong file type
    :status 422: Not logged in

    """
    if 'file' not in request.files:
        return jsonify({"msg": "No file"}), 400
    file = request.files['file']

    if file.filename == '':
        return jsonify({"msg": "No selected file"}), 400

    file_name = secure_filename(file.filename)
    if not (file and check_filename(file.filename)):
        return jsonify({"msg": "Incorrect file type"}), 400

    s3 = boto3.client('s3')
    # Get user
    id = get_jwt_identity()
    user = db.users.find_one({'_id': ObjectId(id)})

    # remove old resume
    try :
        if ('resume' in user):
            if (user['resume'] == ""):
                eastern = pytz.timezone("America/New_York")
                eventFile = open("event.txt", "r")
                result = db.users.update_many(
                {
                    '_id': ObjectId(id),
                    'registrations.event' : eventFile.read()
                },
                {
                    '$set': {
                        "registrations.$.apply": True,
                        "registrations.$.apply_at": pytz.utc.localize(datetime.datetime.utcnow()).astimezone(eastern),
                        "registrations.$.status": "applied"
                    }
                }
            )
                send_apply_confirm(user['username'], user['profile']['first_name'])
            else:
                old_file_name = user['resume']
                object_name = 'Fall-2025/{}-{}'.format(id, old_file_name)
                s3.delete_object(Bucket=BUCKET, Key=object_name)
    except Exception as e:
        print(e)
        return jsonify({'msg': str(e)}, 400)
        

    # TODO make this atomic? what if the file upload doesn't work?
    object_name = 'Fall-2025/{}-{}'.format(id, file_name)
    s3.upload_fileobj(file, BUCKET, object_name)

    db.users.update_one(
        {'_id': ObjectId(id)},
        {'$set': {'resume': file_name}}
    )

    return jsonify({'msg': 'file uploaded'}, 200)


@resume_api.route('/filename', methods = ['GET'])
@jwt_required
def filename():
    """Get the filename of the current user's resume.

    :reqheader Authorization: ``Bearer <JWT Token>``

    Example Response JSON:
    .. sourcecode:: json

        {
            "filename": "ElaineWong.pdf",
        }


    :resjson filename: name of resume file

    :status 200: File uploaded successfully
    :status 422: Not logged in

    """

    id = get_jwt_identity()
    user = db.users.find_one({'_id': ObjectId(id)})

    if ('resume' not in user):
        return jsonify({'filename': ''}), 200

    return jsonify({'filename': user['resume']}), 200


@resume_api.route('/', methods = ['GET'])
@jwt_required
def download():
    """Get the actual resume file stored in S3. (though actually returns a link).

    :reqheader Authorization: ``Bearer <JWT Token>``

    :resjson url: temporary link generated by S3 where user can download file from
    :status 200: File uploaded successfully
    :status 422: Not logged in

    """

    id = get_jwt_identity()
    user = db.users.find_one({'_id': ObjectId(id)})

    if ('resume' not in user):
        return jsonify({'msg': 'no resume uploaded!'}, 404)

    s3 = boto3.client('s3')
    object_name = 'Fall-2025/{}-{}'.format(id, user['resume'])

    url = s3.generate_presigned_url('get_object',
                                     Params={'Bucket': BUCKET, 'Key': object_name},
                                     ExpiresIn=600)
    return jsonify({'url': url})
