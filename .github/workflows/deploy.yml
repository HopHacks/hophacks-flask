name: Deploy Frontend & Backend to EC2 on Merge to Main

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh

          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "Error: EC2_SSH_KEY is not set!"
            exit 1
          fi

          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          if [ -z "${{ secrets.EC2_HOST }}" ]; then
            echo "EC2_HOST is not set!"
            exit 1
          fi

          echo "Scanning SSH host key for ${{ secrets.EC2_HOST }}..."
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || {
            echo "ssh-keyscan failed for ${{ secrets.EC2_HOST }}"
            exit 1
          }

      - name: Rsync code to EC2 (new folder)
        run: |
          if [ -z "${{ secrets.EC2_USER }}" ]; then
            echo "EC2_USER is not set!"
            exit 1
          fi
          rsync -avz --exclude='node_modules' ./frontend ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/hophacks-flask-new/
          rsync -avz --exclude='__pycache__' ./api ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/hophacks-flask-new/

      - name: SSH and build + swap on EC2
        run: |
          ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e  # Exit on any error

            NEW_DIR=~/hophacks-flask-new
            LIVE_DIR=~/hophacks-flask
            BACKUP_DIR=~/hophacks-flask-backup-$(date +%Y%m%d%H%M%S)

            echo "Building frontend..."

            # Build frontend in new dir
            cd $NEW_DIR/frontend
            source ~/.bashrc
            npm install --legacy-peer-deps
            npm run build

            echo "Build succeeded."

            # Backup current live directory if it exists
            if [ -d "$LIVE_DIR" ]; then
              echo "Backing up current live version to $BACKUP_DIR"
              mv $LIVE_DIR $BACKUP_DIR
            fi

            # Swap new dir to live dir
            echo "Promoting new version to live."
            mv $NEW_DIR $LIVE_DIR

            # Kill old backend/frontend sessions
            echo "Killing old frontend and backend sessions..."
            killall gunicorn || true
            killall node || true
            tmux kill-session -t backend || true
            tmux kill-session -t frontend || true
            echo "Successfully killed old frontend and backend sessions."

            # Start backend tmux session
            echo "Starting backend tmux session..."
            cd $LIVE_DIR/api/src
            tmux new-session -d -s backend 'source ../../venv/bin/activate; gunicorn -w 1 "app:create_app()" -b 127.0.0.1:8000; bash'
            echo "Successfully started backend tmux session."

            # Start frontend tmux session
            echo "Starting frontend tmux session..."
            cd $LIVE_DIR/frontend
            tmux new-session -d -s frontend 'serve -s build; bash'
            echo "Successfully started frontend tmux session."

            echo "Deployment complete."
          EOF
