[{"/Users/ctsahn/git/hophacks-flask/frontend/src/index.js":"1","/Users/ctsahn/git/hophacks-flask/frontend/src/components/App.jsx":"2","/Users/ctsahn/git/hophacks-flask/frontend/src/components/Profile.jsx":"3","/Users/ctsahn/git/hophacks-flask/frontend/src/components/Nav.jsx":"4","/Users/ctsahn/git/hophacks-flask/frontend/src/components/Login.jsx":"5","/Users/ctsahn/git/hophacks-flask/frontend/src/components/EmailConfirmation.jsx":"6","/Users/ctsahn/git/hophacks-flask/frontend/src/components/Home.jsx":"7","/Users/ctsahn/git/hophacks-flask/frontend/src/components/admin/Admin.jsx":"8","/Users/ctsahn/git/hophacks-flask/frontend/src/components/PasswordReset.jsx":"9","/Users/ctsahn/git/hophacks-flask/frontend/src/util/auth.jsx":"10","/Users/ctsahn/git/hophacks-flask/frontend/src/components/Blacklist.jsx":"11"},{"size":157,"mtime":1609309250175,"results":"12","hashOfConfig":"13"},{"size":3239,"mtime":1609563933751,"results":"14","hashOfConfig":"13"},{"size":1644,"mtime":1609563933701,"results":"15","hashOfConfig":"13"},{"size":668,"mtime":1609309250169,"results":"16","hashOfConfig":"13"},{"size":1306,"mtime":1609309250168,"results":"17","hashOfConfig":"13"},{"size":882,"mtime":1609309250085,"results":"18","hashOfConfig":"13"},{"size":123,"mtime":1609563933658,"results":"19","hashOfConfig":"13"},{"size":331,"mtime":1609465639234,"results":"20","hashOfConfig":"13"},{"size":1207,"mtime":1609309250171,"results":"21","hashOfConfig":"13"},{"size":1142,"mtime":1609309250177,"results":"22","hashOfConfig":"13"},{"size":2164,"mtime":1609775869179,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"f1dg0p",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ctsahn/git/hophacks-flask/frontend/src/index.js",[],["53","54"],"/Users/ctsahn/git/hophacks-flask/frontend/src/components/App.jsx",["55","56"],"import React, {useState, useEffect} from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport axios from \"axios\";\n\n\nimport Login from \"./Login\"\nimport Home from \"./Home\"\nimport Profile from \"./Profile\"\nimport Admin from \"./admin/Admin\"\nimport Nav from \"./Nav\"\nimport EmailConfirmation from \"./EmailConfirmation\"\nimport PasswordReset from \"./PasswordReset\"\nimport Blacklist from \"./Blacklist\"\n\nexport default function App() {\n\n    const [token, setToken] = useState('');\n    // Can be null (haven't tried logging in with refreshToken yet)\n    const [isLoggedIn, setLoggedIn] = useState(null);\n    let refreshInterval;\n\n    async function refreshToken() {\n        if (isLoggedIn === false) { // false rather than null\n            return;\n        }\n\n        try {\n            const response = await axios.get('/api/auth/session/refresh');\n            const tok = response.data[\"access_token\"];\n            axios.defaults.headers.common = {'Authorization': `Bearer ${tok}`}\n            setToken(tok);\n            setLoggedIn(true);\n        } catch {\n            console.log(\"Refresh failed\");\n            setLoggedIn(false);\n        }\n    }\n\n    // Login to page\n    async function login(email, password) {\n        const response = await axios.post('/api/auth/login', {\n            \"username\": email,\n            \"password\": password\n        });\n\n        const tok = response.data[\"access_token\"];\n        axios.defaults.headers.common = {'Authorization': `Bearer ${tok}`}\n\n        setToken(tok);\n        setLoggedIn(true);\n        setInterval(refreshToken, 60000);\n    }\n\n\n    // Logout by destroying our access token and telling server to remove our\n    // refresh token fro, DB and cookies. Redirect to Home\n    async function logout() {\n        setToken('');\n        setLoggedIn(false);\n        delete axios.defaults.headers.common[\"Authorization\"];\n        if (refreshInterval) {\n            clearInterval(refreshInterval);\n        }\n\n        const url = '/api/auth/session/logout';\n        try {\n            await axios.get(url);\n        } catch(error) {\n            console.log(\"Error logging out, perhaps already logged out?\");\n        }\n    }\n\n\n    async function attemptRefresh() {\n        try {\n            await refreshToken();\n            refreshInterval = setInterval(refreshToken, 60000);\n        }\n        catch{\n            setLoggedIn(false);\n        }\n    }\n\n    useEffect(() => {\n        attemptRefresh();\n    }, []);\n\n  return (\n    <Router>\n      <div>\n        <Nav isLoggedIn={isLoggedIn} logout={logout}/>\n\n        <Switch>\n          <Route path=\"/admin\">\n            <Admin />\n          </Route>\n          <Route path=\"/profile\">\n            <Profile isLoggedIn={isLoggedIn}/>\n          </Route>\n          <Route path=\"/login\">\n\n            <Login login={login}/>\n          </Route>\n          <Route path=\"/blacklist\">\n            \n            <Blacklist isLoggedIn={isLoggedIn}/>\n          </Route>\n          <Route path=\"/reset_password/:token\" component={PasswordReset}/>\n          <Route path=\"/confirm_email/:token\" component={EmailConfirmation}/>\n\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","/Users/ctsahn/git/hophacks-flask/frontend/src/components/Profile.jsx",["57","58"],"import React, {useState, useEffect} from \"react\";\nimport axios from \"axios\";\n\nimport {withAuth} from \"../util/auth.jsx\";\n\nconst Profile = function Profile(props) {\n    const [file, setFile] = useState(\"\");\n    const [oldName, setOldName] = useState(\"\");\n\n    async function getFileName() {\n        /* If we are not logged in, don't bother trying to access endpoint (we'll get a 401) */\n        if (!props.isLoggedIn) return;\n\n        try {\n            const response = await axios.get(\"/api/resumes/filename\");\n            setOldName(response.data[\"filename\"])\n        } catch(e) {\n            setOldName(\"\");\n        }\n    }\n\n    function handleFileChange(e) {\n        setFile(e.target.files[0])\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n        const data = new FormData();\n        data.append(\"file\", file);\n\n        const response = await axios.post(\"/api/resumes/\", data);\n        // TODO handle error!\n    }\n\n    async function handleDownload(e) {\n        e.preventDefault();\n\n        const response = await axios.get(\"/api/resumes/\");\n        const url = response.data['url'];\n        window.open(url, \"_blank\");\n    }\n\n    useEffect(() => {\n        getFileName();\n    }, [props.isLoggedIn]);\n\n    return (\n        <div>\n          <form onSubmit={handleSubmit}>\n            <div>\n              <input type=\"file\" name=\"file\" onChange={handleFileChange}/>\n            </div>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n\n          <hr/>\n          <p>{oldName}</p>\n          <button onClick={handleDownload}>Download</button>\n        </div>\n    );\n}\n\nexport default withAuth(Profile);\n","/Users/ctsahn/git/hophacks-flask/frontend/src/components/Nav.jsx",[],"/Users/ctsahn/git/hophacks-flask/frontend/src/components/Login.jsx",["59"],"import React, { useState } from \"react\";\n\nimport {login} from \"../util/auth\";\n\nimport {\n    useHistory\n} from \"react-router-dom\";\n\nexport default function Login(props) {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    let history = useHistory();\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        // TODO alert?\n        try {\n            await props.login(email, password);\n\n            if (email !== \"admin\") {\n                history.push(\"/profile\")\n            } else {\n                history.push(\"/admin\")\n            }\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n\n    return (\n      <div className=\"Hophacks\">\n        <form onSubmit={handleSubmit}>\n          <label>\n            Email:\n            <input\n                autoFocus\n                type=\"text\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n            />\n          </label>\n          <label>\n            Password:\n            <input\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n                type=\"password\"\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n\n\n      </div>\n    );\n\n}\n","/Users/ctsahn/git/hophacks-flask/frontend/src/components/EmailConfirmation.jsx",["60","61"],"import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\n\nexport default function EmailConfirmation(props) {\n    const [message, setMessage] = useState('Confirming Email...');\n    let attempted = false;\n\n    async function confirm_email() {\n        try {\n            const response = await axios.post(\"/api/accounts/confirm_email\", {\n                'confirm_token': props.match.params.token\n            });\n            setMessage('Email Confirmed! Login to your account again to apply!');\n        } catch(e) {\n            setMessage('Something went wrong :(, maybe the link was old? Try logging in to request a new confirmation token');\n        }\n    }\n\n\n    useEffect(() => {\n        // Prevent from multiple tries\n        if (!attempted) {\n            confirm_email();\n            attempted = true;\n        }\n    }, []);\n\n    return (<div>{message}</div>);\n}\n","/Users/ctsahn/git/hophacks-flask/frontend/src/components/Home.jsx",[],"/Users/ctsahn/git/hophacks-flask/frontend/src/components/admin/Admin.jsx",["62"],"import React from \"react\";\nimport { withAdminAuth } from \"../../util/auth\";\nimport Blacklist from \"../Blacklist\"\n\nimport { Link } from \"react-router-dom\";\n\nconst Admin =  function() {\n    return (<div> Admin Page <br></br> \n    \n    <Link to=\"/blacklist\">Blacklist</Link>\n    \n    </div>);\n};\n\nexport default withAdminAuth(Admin);\n","/Users/ctsahn/git/hophacks-flask/frontend/src/components/PasswordReset.jsx",["63"],"import React, { useState } from \"react\";\n\nimport axios from 'axios';\n\nexport default function PasswordReset(props) {\n    const [message, setMessage] = useState('');\n    const [attempted, setAttempted] = useState(false);\n    const [password, setPassword] = useState('');\n\n    async function reset_password(event) {\n        event.preventDefault();\n        try {\n            const response = await axios.post(\"/api/accounts/reset_password\", {\n                'reset_token': props.match.params.token,\n                'password': password\n            });\n            setMessage('Password reset successfully!');\n        } catch(e) {\n            setMessage('Unable to reset password');\n        }\n        setAttempted(true);\n    }\n\n\n    return (\n        <div>\n            {attempted ||\n            <form onSubmit={reset_password}>\n              <label>\n                Password:\n                <input\n                    value={password}\n                    onChange={e => setPassword(e.target.value)}\n                    type=\"password\"\n                />\n              </label>\n              <input type=\"submit\" value=\"Submit\" />\n            </form>\n            }\n            <p>{message}</p>\n        </div>);}\n","/Users/ctsahn/git/hophacks-flask/frontend/src/util/auth.jsx",[],"/Users/ctsahn/git/hophacks-flask/frontend/src/components/Blacklist.jsx",["64","65","66","67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":21,"column":12,"nodeType":"74","messageId":"75","endLine":21,"endColumn":17},{"ruleId":"76","severity":1,"message":"77","line":90,"column":8,"nodeType":"78","endLine":90,"endColumn":10,"suggestions":"79"},{"ruleId":"72","severity":1,"message":"80","line":31,"column":15,"nodeType":"74","messageId":"75","endLine":31,"endColumn":23},{"ruleId":"76","severity":1,"message":"81","line":45,"column":8,"nodeType":"78","endLine":45,"endColumn":26,"suggestions":"82"},{"ruleId":"72","severity":1,"message":"83","line":3,"column":9,"nodeType":"74","messageId":"75","endLine":3,"endColumn":14},{"ruleId":"72","severity":1,"message":"80","line":10,"column":19,"nodeType":"74","messageId":"75","endLine":10,"endColumn":27},{"ruleId":"76","severity":1,"message":"84","line":24,"column":25,"nodeType":"85","endLine":24,"endColumn":29},{"ruleId":"72","severity":1,"message":"86","line":3,"column":8,"nodeType":"74","messageId":"75","endLine":3,"endColumn":17},{"ruleId":"72","severity":1,"message":"80","line":13,"column":19,"nodeType":"74","messageId":"75","endLine":13,"endColumn":27},{"ruleId":"87","severity":1,"message":"88","line":13,"column":29,"nodeType":"89","messageId":"90","endLine":13,"endColumn":31},{"ruleId":"91","severity":1,"message":"92","line":19,"column":13,"nodeType":"93","messageId":"94","endLine":19,"endColumn":32},{"ruleId":"76","severity":1,"message":"95","line":50,"column":8,"nodeType":"78","endLine":50,"endColumn":26,"suggestions":"96"},{"ruleId":"87","severity":1,"message":"88","line":61,"column":18,"nodeType":"89","messageId":"90","endLine":61,"endColumn":20},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'attemptRefresh'. Either include it or remove the dependency array.","ArrayExpression",["99"],"'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFileName'. Either include it or remove the dependency array.",["100"],"'login' is defined but never used.","Assignments to the 'attempted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'Blacklist' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","React Hook useEffect has a missing dependency: 'getBlackList'. Either include it or remove the dependency array.",["101"],"no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [attemptRefresh]",{"range":"108","text":"109"},"Update the dependencies array to be: [getFileName, props.isLoggedIn]",{"range":"110","text":"111"},"Update the dependencies array to be: [getBlackList, props.isLoggedIn]",{"range":"112","text":"113"},[2474,2476],"[attemptRefresh]",[1209,1227],"[getFileName, props.isLoggedIn]",[1098,1116],"[getBlackList, props.isLoggedIn]"]